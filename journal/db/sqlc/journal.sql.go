// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: journal.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJournal = `-- name: CreateJournal :one
INSERT INTO journal (
    username, title, content, status
) VALUES (
    $1, $2, $3, $4
) RETURNING id, username, title, content, status, created_at, updated_at, is_embedded
`

type CreateJournalParams struct {
	Username string      `json:"username"`
	Title    string      `json:"title"`
	Content  pgtype.Text `json:"content"`
	Status   bool        `json:"status"`
}

func (q *Queries) CreateJournal(ctx context.Context, arg CreateJournalParams) (Journal, error) {
	row := q.db.QueryRow(ctx, createJournal,
		arg.Username,
		arg.Title,
		arg.Content,
		arg.Status,
	)
	var i Journal
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmbedded,
	)
	return i, err
}

const getJournal = `-- name: GetJournal :one
SELECT id, username, title, content, status, created_at, updated_at, is_embedded FROM journal
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJournal(ctx context.Context, id int64) (Journal, error) {
	row := q.db.QueryRow(ctx, getJournal, id)
	var i Journal
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmbedded,
	)
	return i, err
}

const getJournalFromUserInTime = `-- name: GetJournalFromUserInTime :many
SELECT id, username, title, content, status, created_at, updated_at, is_embedded FROM journal
WHERE username = $1 AND updated_at >= $2 AND updated_at <= $3
`

type GetJournalFromUserInTimeParams struct {
	Username    string    `json:"username"`
	UpdatedAt   time.Time `json:"updated_at"`
	UpdatedAt_2 time.Time `json:"updated_at_2"`
}

func (q *Queries) GetJournalFromUserInTime(ctx context.Context, arg GetJournalFromUserInTimeParams) ([]Journal, error) {
	rows, err := q.db.Query(ctx, getJournalFromUserInTime, arg.Username, arg.UpdatedAt, arg.UpdatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Journal{}
	for rows.Next() {
		var i Journal
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsEmbedded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJournal = `-- name: UpdateJournal :one
UPDATE journal
SET
    title = COALESCE($1, title),
    content = COALESCE($2, content),
    status = COALESCE($3, status),
    is_embedded = COALESCE($4, is_embedded),
    updated_at = now()
WHERE id = $5
RETURNING id, username, title, content, status, created_at, updated_at, is_embedded
`

type UpdateJournalParams struct {
	Title      pgtype.Text `json:"title"`
	Content    pgtype.Text `json:"content"`
	Status     pgtype.Bool `json:"status"`
	IsEmbedded bool        `json:"is_embedded"`
	ID         int64       `json:"id"`
}

func (q *Queries) UpdateJournal(ctx context.Context, arg UpdateJournalParams) (Journal, error) {
	row := q.db.QueryRow(ctx, updateJournal,
		arg.Title,
		arg.Content,
		arg.Status,
		arg.IsEmbedded,
		arg.ID,
	)
	var i Journal
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsEmbedded,
	)
	return i, err
}
