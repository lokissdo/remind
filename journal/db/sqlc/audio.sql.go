// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: audio.sql

package db

import (
	"context"
)

const createAudio = `-- name: CreateAudio :one
INSERT INTO audio (
    journal_id, content
) VALUES (
    $1, $2
) RETURNING id, journal_id, content, created_at, is_embedded
`

type CreateAudioParams struct {
	JournalID int64  `json:"journal_id"`
	Content   []byte `json:"content"`
}

func (q *Queries) CreateAudio(ctx context.Context, arg CreateAudioParams) (Audio, error) {
	row := q.db.QueryRow(ctx, createAudio, arg.JournalID, arg.Content)
	var i Audio
	err := row.Scan(
		&i.ID,
		&i.JournalID,
		&i.Content,
		&i.CreatedAt,
		&i.IsEmbedded,
	)
	return i, err
}

const getAudioOfJournal = `-- name: GetAudioOfJournal :many
SELECT id, journal_id, content, created_at, is_embedded 
FROM audio
WHERE journal_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAudioOfJournal(ctx context.Context, journalID int64) ([]Audio, error) {
	rows, err := q.db.Query(ctx, getAudioOfJournal, journalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Audio{}
	for rows.Next() {
		var i Audio
		if err := rows.Scan(
			&i.ID,
			&i.JournalID,
			&i.Content,
			&i.CreatedAt,
			&i.IsEmbedded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAudioEmbeddingStatus = `-- name: UpdateAudioEmbeddingStatus :one
UPDATE audio
SET is_embedded = $1
WHERE id = $2
RETURNING id, journal_id, content, created_at, is_embedded
`

type UpdateAudioEmbeddingStatusParams struct {
	IsEmbedded bool  `json:"is_embedded"`
	ID         int64 `json:"id"`
}

func (q *Queries) UpdateAudioEmbeddingStatus(ctx context.Context, arg UpdateAudioEmbeddingStatusParams) (Audio, error) {
	row := q.db.QueryRow(ctx, updateAudioEmbeddingStatus, arg.IsEmbedded, arg.ID)
	var i Audio
	err := row.Scan(
		&i.ID,
		&i.JournalID,
		&i.Content,
		&i.CreatedAt,
		&i.IsEmbedded,
	)
	return i, err
}
