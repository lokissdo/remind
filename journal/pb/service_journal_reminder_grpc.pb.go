// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: service_journal_reminder.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JournalRemindClient is the client API for JournalRemind service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JournalRemindClient interface {
	CreateJournal(ctx context.Context, in *CreateJournalRequest, opts ...grpc.CallOption) (*CreateJournalResponse, error)
	UpdateJournal(ctx context.Context, in *UpdateJournalRequest, opts ...grpc.CallOption) (*UpdateJournalResponse, error)
	DeleteJournal(ctx context.Context, in *DeleteJournalRequest, opts ...grpc.CallOption) (*DeleteJournalResponse, error)
}

type journalRemindClient struct {
	cc grpc.ClientConnInterface
}

func NewJournalRemindClient(cc grpc.ClientConnInterface) JournalRemindClient {
	return &journalRemindClient{cc}
}

func (c *journalRemindClient) CreateJournal(ctx context.Context, in *CreateJournalRequest, opts ...grpc.CallOption) (*CreateJournalResponse, error) {
	out := new(CreateJournalResponse)
	err := c.cc.Invoke(ctx, "/pb.JournalRemind/CreateJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalRemindClient) UpdateJournal(ctx context.Context, in *UpdateJournalRequest, opts ...grpc.CallOption) (*UpdateJournalResponse, error) {
	out := new(UpdateJournalResponse)
	err := c.cc.Invoke(ctx, "/pb.JournalRemind/UpdateJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalRemindClient) DeleteJournal(ctx context.Context, in *DeleteJournalRequest, opts ...grpc.CallOption) (*DeleteJournalResponse, error) {
	out := new(DeleteJournalResponse)
	err := c.cc.Invoke(ctx, "/pb.JournalRemind/DeleteJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JournalRemindServer is the server API for JournalRemind service.
// All implementations must embed UnimplementedJournalRemindServer
// for forward compatibility
type JournalRemindServer interface {
	CreateJournal(context.Context, *CreateJournalRequest) (*CreateJournalResponse, error)
	UpdateJournal(context.Context, *UpdateJournalRequest) (*UpdateJournalResponse, error)
	DeleteJournal(context.Context, *DeleteJournalRequest) (*DeleteJournalResponse, error)
	mustEmbedUnimplementedJournalRemindServer()
}

// UnimplementedJournalRemindServer must be embedded to have forward compatible implementations.
type UnimplementedJournalRemindServer struct {
}

func (UnimplementedJournalRemindServer) CreateJournal(context.Context, *CreateJournalRequest) (*CreateJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJournal not implemented")
}
func (UnimplementedJournalRemindServer) UpdateJournal(context.Context, *UpdateJournalRequest) (*UpdateJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJournal not implemented")
}
func (UnimplementedJournalRemindServer) DeleteJournal(context.Context, *DeleteJournalRequest) (*DeleteJournalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJournal not implemented")
}
func (UnimplementedJournalRemindServer) mustEmbedUnimplementedJournalRemindServer() {}

// UnsafeJournalRemindServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JournalRemindServer will
// result in compilation errors.
type UnsafeJournalRemindServer interface {
	mustEmbedUnimplementedJournalRemindServer()
}

func RegisterJournalRemindServer(s grpc.ServiceRegistrar, srv JournalRemindServer) {
	s.RegisterService(&JournalRemind_ServiceDesc, srv)
}

func _JournalRemind_CreateJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalRemindServer).CreateJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.JournalRemind/CreateJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalRemindServer).CreateJournal(ctx, req.(*CreateJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalRemind_UpdateJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalRemindServer).UpdateJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.JournalRemind/UpdateJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalRemindServer).UpdateJournal(ctx, req.(*UpdateJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalRemind_DeleteJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalRemindServer).DeleteJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.JournalRemind/DeleteJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalRemindServer).DeleteJournal(ctx, req.(*DeleteJournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JournalRemind_ServiceDesc is the grpc.ServiceDesc for JournalRemind service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JournalRemind_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.JournalRemind",
	HandlerType: (*JournalRemindServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJournal",
			Handler:    _JournalRemind_CreateJournal_Handler,
		},
		{
			MethodName: "UpdateJournal",
			Handler:    _JournalRemind_UpdateJournal_Handler,
		},
		{
			MethodName: "DeleteJournal",
			Handler:    _JournalRemind_DeleteJournal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_journal_reminder.proto",
}
